%apprun validateSchema
    echo Validating Schema
    echo Job ID: ${SLURM_JOB_ID:-222222}
    /bin/validateSchema.sh $@

%apprun validateRules
    echo Validating Rules
    echo Job ID: ${SLURM_JOB_ID:-222222}
    /bin/validateRules.sh $@
	
%apprun addNoise
    echo Adding Noise
    echo Job ID: ${SLURM_JOB_ID:-222222}
    /bin/addNoiseApp.sh $@

%apprun epiHiper_sciduct.pre
    echo "Build Configuration"
    START=`cat /job/job.json | jq -r .input.startTick`
    END=`cat /job/job.json | jq -r .input.endTick`
    SEED=`cat /job/job.json | jq -r .input.seed`
    DBHOST=`cat /job/job.json | jq -r .input.dbHost`
    CONTACT_NETWORK_ID=`cat /input/.contactNetwork | jq -r .id`
    PARTITION_NAME=${CONTACT_NETWORK_ID}_partitionX${SCIDUCT_TASKS}

    echo '{"epiHiperSchema": "https://github.com/NSSAC/EpiHiper-Schema/blob/master/schema/modelScenarioSchema.json","personTraitDB": ["/input/personTraitDB"],"diseaseModel": "/input/diseaseModel","initialization":"/input/initialization","intervention":"/input/intervention","contactNetwork":"/input/contactNetwork","traits":"/input/traits"}' > /input/scenario.json
    echo '{"epiHiperSchema": "https://github.com/NSSAC/EpiHiper-Schema/blob/master/schema/runParametersSchema.json","modelScenario": "/input/scenario.json","output": "/output/output.csv", "startTick":'$START',"endTick":'$END',"seed":'$SEED',"dbHost":"'$DBHOST'","summaryOutput":"/output/outputSummary.csv","status":"/job/primary.status.json"}' > /input/runParameters.json
    echo '{"epiHiperSchema": "https://github.com/NSSAC/EpiHiper-Schema/blob/master/schema/partitionSchema.json","contactNetwork": "/input/contactNetwork","outputDirectory": "/input", "numberOfParts":'$SCIDUCT_TASKS',"status": "/job/primary.status.json"}' > /input/partitionConfig.json

    echo "Partition Network"

    if [ -d /cache/partitions/$PARTITION_NAME ]
    then
        echo "Found cached files in /cache/partitions/$PARTITION_NAME"
        for I in /cache/partitions/$PARTITION_NAME/contactNetwork.*; do
            N=`basename $I`
            ln -s $I /input/$N 
        done
 
    else
        source /opt/intel/impi/2018.5.288/bin64/mpivars.sh
        /bin/partition.sh /input/partitionConfig.json

        let retval=$?
        if [ ${retval} != 0 ]
        then
            echo "Partitioning failed."
            exit ${retval}
        fi

        if [ -d /cache/partitions/$PARTITION_NAME ]
        then
            echo "Cache already populated"
        else
            echo "Attempt to add partition to cache"
            flock -n -x /cache/partitions/${PARTITION_NAME}.lock --command "/bin/copyPartitionToCache.sh $PARTITION_NAME" || echo "Cache files not added"
        fi
    fi

    echo "Configuration Completed"

%apprun epiHiper_sciduct
    echo Rank $PMI_RANK: Running EpiHiper Simulation
    echo Rank $PMI_RANK: Job ID: ${SLURM_JOB_ID:-222222}
    /bin/epiHiper.sh /input/runParameters.json
	
%apprun epiHiper
    echo Rank $PMI_RANK: Running EpiHiper Simulation
    echo Rank $PMI_RANK: Job ID: ${SLURM_JOB_ID:-222222}
    /bin/epiHiper.sh $@

%apprun partition
    echo Partitioning Network
    echo Job ID: ${SLURM_JOB_ID:-222222}
    /bin/partition.sh $@

%apprun partition_sciduct
    echo Partitioning Network
    echo Job ID: ${SLURM_JOB_ID:-222222}
    PARTITIONS=`cat /job/job.json | jq -r .input.partitions`
    echo '{"$schema": "../../schema/partitionSchema.json","epiHiperSchema": "https://github.com/NSSAC/EpiHiper-Schema/blob/master/schema/partitionSchema.json","contactNetwork": "self://../input/contactNetwork","numberOfParts": '$PARTITIONS',"status": "/job/primary.status.json"}' > /output/partitionConfig.json
    /bin/partition.sh /output/partitionConfig.json

%apprun analyze
    echo Analyzing Disease Model
    echo Job ID: ${SLURM_JOB_ID:-222222}
    /bin/analyze.sh $@
