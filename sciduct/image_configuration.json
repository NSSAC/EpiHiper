{
	"$id": "execution_container",
	"type": "object",
	"definitions": {
		"datetime": {
			"type": "string",
			"format": "date-time"
		},
		"reference": {
			"type": "object",
			"properties": {
				"$ref": {
					"type": "string"
				}
			},
			"required": [
				"$ref"
			]
		},
		"id_array": {
			"type": "array",
			"description": "Array of IDs",
			"items": {
				"type": "string",
				"description": "ID"
			}
		},
		"resource_requirement": {
			"type": "object",
			"properties": {
				"capabilities": {
					"type": "object",
					"description": "Capabilities Required",
					"properties": {
						"mpi": {
							"type": "boolean",
							"description": "Whether this job requires mpi",
							"default": false
						},
						"mpi_versions": {
							"type": "array",
							"items": {
								"type": "string",
								"description": "An MPI Version string"
							},
							"default": []
						}
					},
					"required": []
				},
				"nodes": {
					"oneOf": [
						{
							"type": "integer",
							"description": "number of nodes required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of nodes required, and second element, if it exists is the maximum number of nodes it will require",
							"maxItems": 2
						}
					]
				},
				"cores": {
					"oneOf": [
						{
							"type": "integer",
							"description": "total number of cores required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of cores required, and second element, if it exists is the maximum number of cores it will require",
							"maxItems": 2
						}
					]
				},
				"tasks": {
					"oneOf": [
						{
							"type": "integer",
							"description": "Number of tasks to run for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of tasks required, and second element, if it exists is the maximum number of tasks it may use",
							"maxItems": 2
						}
					]
				},
				"cores_per_node": {
					"oneOf": [
						{
							"type": "integer",
							"description": "number of cores_per_node required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of cores_per_node required, and second element, if it exists is the maximum number of cores_per_node it will require",
							"maxItems": 2
						}
					]
				},
				"gpus": {
					"oneOf": [
						{
							"type": "integer",
							"description": "number of gpus required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of gpus required, and second element, if it exists is the maximum number of gpus it will require",
							"maxItems": 2
						}
					]
				},
				"gpus_per_node": {
					"oneOf": [
						{
							"type": "integer",
							"description": "number of gpus_per_node required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum number of gpus_per_node required, and second element, if it exists is the maximum number of gpus_per_node it will require",
							"maxItems": 2
						}
					]
				},
				"memory_per_node": {
					"oneOf": [
						{
							"type": "integer",
							"description": "megabyutes of memory_per_node required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum memory_per_node (in mb) required, and second element, if it exists is the maximum number memory_per_node (in mb) it will require",
							"maxItems": 2
						}
					]
				},
				"memory_per_core": {
					"oneOf": [
						{
							"type": "integer",
							"description": "megabyutes of memory_per_core required for this job"
						},
						{
							"type": "array",
							"description": "Array whose first element, if it exists, is the minimum memory_per_core (in mb) required, and second element, if it exists is the maximum number memory_per_core (in mb) it will require",
							"maxItems": 2
						}
					]
				},
				"resource_calculator": {
					"type": "string",
					"description": "A python function that takes the job definition, input parameters, input file metadata, and the effect maximum job size and calculates the resources required for this task"
				}
			},
			"anyOf": [
				{
					"required": [
						"cores"
					]
				},
				{
					"required": [
						"nodes"
					]
				}
			]
		},
		"output_file_definition": {
			"type": "object",
			"properties": {
				"file": {
					"type": "string"
				},
				"match": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"type": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/definitions/reference"
						}
					]
				},
				"isContainer": {
					"type": "boolean",
					"default": false
				},
				"contents": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/output_file_definition"
					}
				}
			}
		}
	},
	"properties": {
		"version": {
			"type": "string",
			"description": "The version of this image",
			"default": "0.0.0"
		},
		"description": {
			"type": "string",
			"description": "Description of this image"
		},
		"authors": {
			"type": "array",
			"items": {
				"type": "string",
				"description": "Author of this Image/Software"
			}
		},
		"license": {
			"type": "string",
			"description": "License applied to this image/software."
		},
		"image_type": {
			"type": "string",
			"description": "The type of image being executed",
			"enum": ["apptainer","apptainer+scif"],
			"default": "apptainer"
		},
		"apps": {
			"type": "array",
			"description": "array of sciduct applications included in the image",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the app. May be used for generate of jobdefinition names",
						"pattern": "^([0-9]|[a-zA-Z]|[\\.\\-_\\s])+$"
					},
					"app": {
						"type": "string",
						"description": "The name of the singularity app to trigger for this code",
						"pattern": "^([0-9]|[a-zA-Z]|[\\.\\-_\\s])+$"
					},
					"pre_task": {
						"type": "string",
						"description": "Task to execute prior to running the main app task.  This is typically used for setup before a multiprocess task",
						"pattern": "^([0-9]|[a-zA-Z]|[\\.\\-_\\s])+$"
					},
					"post_task": {
						"type": "string",
						"description": "Task to execute after running the main app task.  This is typically used for processing after a multiprocess task",
						"pattern": "^([0-9]|[a-zA-Z]|[\\.\\-_\\s])+$"
					},
					"description": {
						"type": "string",
						"description": "Description of this application"
					},
					"binds": {
						"type": "object",
						"properties": {
							"input": {
								"type": "string",
								"description": "internal folder to bind input to"
							},
							"output": {
								"type": "string",
								"description": "internal folder to bind output to"
							},
							"job": {
								"type": "string",
								"description": "internal folder to bind job to"
							},
							"container_cache": {
								"type": "string",
								"description": "internal folder to bind container cache to (if any)"
							},
							"application_cache": {
								"type": "string",
								"description": "internal folder to bind application cache to (if any)"
							},
							"version_cache": {
								"type": "string",
								"description": "internal folder to bind application version cache to (if any)"
							}
						},
						"default": {
							"input": "/input",
							"output": "/output",
							"job": "/job"
						}
					},
					"resource_requirements": {
						"$ref": "#/definitions/resource_requirement",
						"description": "The resource requirement definition for this job type"
					},
					"input_schema": {
						"type": "object",
						"description": "Input Schema"
					},
					"input_files": {
						"type": "array",
						"description": "Array of input files",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "The property name of this file.",
									"pattern": "^([0-9]|[a-zA-Z]|[\\-_\\s])+$"
								},
								"static": {
									"type": "string",
									"description": "Statically defined file. These can automatically include files from the fileservice for a job without being supplied by a user.  User still must have at least compute access to the defined file"
								},
								"types": {
									"type": "array",
									"description": "Array of file types that are valid for this input",
									"items": {
										"type": "string",
										"description": "File type that is valid for this input"
									}
								},
								"match": {
									"type": "string",
									"description": "JSONPath expression matched against the input parameters. Matched path is converted to a local path/filename for consumption"
								},
								"min_match_count": {
									"type": "integer",
									"description": "If this object defines a 'match', this is the minimum number of matching files for this job to be accepted"
								},
								"default": {
									"type": "string",
									"description": "Default file reference for this input, if not provided by the user"
								},
								"stage": {
									"type": "boolean",
									"description": "Whether or not this file should be staged during job execution",
									"default": true
								},
								"required": {
									"type": "boolean",
									"description": "Whether this input file is required for job submission",
									"default": false
								},
								"require_related_provenance_files": {
									"type": "boolean",
									"description": "Whether this related provenance files for this file reference are optional",
									"default": false
								},
								"retrieve_children": {
									"type": "object",
									"description": "If target type is a container, whether or not to retrieve children.  By default containers, other than folders, are automatically retrieved.  Folders require this definition.  If this is not a folder, maximum_depth does not apply.",
									"properties": {
										"types": {
											"oneOf": [
												{
													"type": "boolean",
													"const": false
												},
												{
													"type": "string",
													"const": "*",
													"description": "All children types"
												},
												{
													"type": "array",
													"items": {
														"type": "string",
														"description": "Allowed type of children"
													}
												}
											]
										},
										"minimum": {
											"type": "integer",
											"description": "Minimum number of direct children to be considered valid",
											"minimum": 0,
											"default": 0
										},
										"maximum": {
											"type": "integer",
											"description": "Maximum number of direct children to be considered valid",
											"minimum": 0,
											"default": 9999
										},
										"maximum_depth": {
											"type": "integer",
											"description": "Maximum depth to retrieve within this container.  0 means only direct children are retrieved.  Depth only applies to actual 'folder' types, not general containers"
										}
									},
									"required": [
										"types"
									]
								},
								
								
								"retrieve_provenance_files": {
									"description": "Whether or not files related via provenance (e.g., input files from a job that created this file) should be automatically retrieved. If a boolean, it applies to all related files for the input.  Alternatively a dictionary containing the specific related files to retrieve can be provided.  The alternative version allows transformation requests to happen.",
									"oneOf": [
										{
											"type": "boolean",
											"description": "If true, all the related files for the associated file will be retrieved.  If false, none will"
										},
										{
											"type": "object",
											"description": "Object whose keys are the associated related file keys (within provenance input_files) to retrieve files.  The value is either the boolean true or a string with an appropriate transformation for the given type"
										}
									],
									"default": false
								}
								
							},
							"anyOf":[
								{"required": ["name"]},
								{"required": ["match"]}
							],
							"required": [
								"types",
								"required"
							]
						}
					},
					"output_files": {
						"type": "object",
						"description": "output files description",
						"properties": {
							"type": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"$ref": "#/definitions/reference"
									}
								]
							},
							"file": {
								"type": "string",
								"description": "file to match against output"
							},
							"contents": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/output_file_definition"
								}
							}
						}
					},
					"output_schema": {
						"type": "object",
						"description": "Output Schema"
					}
				},
				"required": [
					"description",
					"resource_requirements"
				]
			},
			"minItems": 1
		},
		"build_date": {
			"$ref": "#/definitions/datetime",
			"description": "DateTime when this image version was uploaded"
		}
	},
	"required": [
		"version",
		"build_date",
		"apps",
		"image_type"
	]
}